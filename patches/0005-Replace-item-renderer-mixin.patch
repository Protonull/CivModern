From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander <protonull@protonmail.com>
Date: Wed, 5 Jun 2024 15:08:11 +0100
Subject: [PATCH] Replace item renderer mixin
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Instead of replacing the entire renderItemDecorations method, this instead makes two injections. But before all that, this mixins the ItemStack class to add a cached result so that we aren't wading into the item's NBT every 👏 single 👏 frame 👏.

diff --git a/common/src/main/java/sh/okx/civmodern/common/features/ExtendedItemStack.java b/common/src/main/java/sh/okx/civmodern/common/features/ExtendedItemStack.java
new file mode 100644
index 0000000000000000000000000000000000000000..eeff819ae228fa94328b2f0e3964b2b9347090d1
--- /dev/null
+++ b/common/src/main/java/sh/okx/civmodern/common/features/ExtendedItemStack.java
@@ -0,0 +1,6 @@
+package sh.okx.civmodern.common.features;
+
+public interface ExtendedItemStack {
+    String COMPACTED_ITEM_LORE = "Compacted Item";
+    boolean isMarkedAsCompacted();
+}
diff --git a/common/src/main/java/sh/okx/civmodern/common/mixins/DecorationsGuiGraphicsMixin.java b/common/src/main/java/sh/okx/civmodern/common/mixins/DecorationsGuiGraphicsMixin.java
deleted file mode 100644
index 2156a3b35b40d08754adebca22d50aafe150cbbd..0000000000000000000000000000000000000000
--- a/common/src/main/java/sh/okx/civmodern/common/mixins/DecorationsGuiGraphicsMixin.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package sh.okx.civmodern.common.mixins;
-
-import com.mojang.blaze3d.vertex.PoseStack;
-import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.Font;
-import net.minecraft.client.gui.GuiGraphics;
-import net.minecraft.client.player.LocalPlayer;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
-import net.minecraft.util.Mth;
-import net.minecraft.world.item.ItemStack;
-import org.jetbrains.annotations.Nullable;
-import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.Overwrite;
-import org.spongepowered.asm.mixin.Shadow;
-import sh.okx.civmodern.common.AbstractCivModernMod;
-
-@Mixin(GuiGraphics.class)
-public abstract class DecorationsGuiGraphicsMixin {
-
-    @Shadow
-    private PoseStack pose;
-
-    @Shadow
-    private Minecraft minecraft;
-
-
-    @Shadow abstract void fill(RenderType renderType, int i, int j, int k, int l, int m);
-
-    @Shadow abstract int drawString(Font font, String formattedCharSequence, int i, int j, int k, boolean bl);
-
-    @Overwrite
-    public void renderItemDecorations(Font font, ItemStack itemStack, int i, int j, @Nullable String string) {
-        // Changes to original source code:
-        // - Move item damaged bar to before item count renderer
-        // - Show item count if compacted
-        // - Change colour if compacted
-
-        LocalPlayer localPlayer;
-        float f;
-        int n;
-        int m;
-        if (itemStack.isEmpty()) {
-            return;
-        }
-        this.pose.pushPose();
-        if (itemStack.isBarVisible()) {
-            int k = itemStack.getBarWidth();
-            int l = itemStack.getBarColor();
-            m = i + 2;
-            n = j + 13;
-            this.fill(RenderType.guiOverlay(), m, n, m + 13, n + 2, -16777216);
-            this.fill(RenderType.guiOverlay(), m, n, m + k, n + 1, l | 0xFF000000);
-        }
-        boolean compacted = isCompacted(itemStack);
-        if (itemStack.getCount() != 1 || string != null || compacted) {
-            String string2 = string == null ? String.valueOf(itemStack.getCount()) : string;
-            this.pose.translate(0.0f, 0.0f, 200.0f);
-            int colour = compacted ? AbstractCivModernMod.getInstance().getColourProvider().getCompactedColour() : 0xffffff;
-            this.drawString(font, string2, i + 19 - 2 - font.width(string2), j + 6 + 3, colour, true);
-        }
-        float f2 = f = (localPlayer = this.minecraft.player) == null ? 0.0f : localPlayer.getCooldowns().getCooldownPercent(itemStack.getItem(), this.minecraft.getFrameTime());
-        if (f > 0.0f) {
-            m = j + Mth.floor(16.0f * (1.0f - f));
-            n = m + Mth.ceil(16.0f * f);
-            this.fill(RenderType.guiOverlay(), i, m, i + 16, n, Integer.MAX_VALUE);
-        }
-        this.pose.popPose();
-    }
-
-    private boolean isCompacted(ItemStack item) {
-        if (!item.hasTag()) {
-            return false;
-        }
-        CompoundTag displayTag = item.getTagElement("display");
-        if (displayTag != null && displayTag.getTagType("Lore") == 9) {
-            ListTag listTag = displayTag.getList("Lore", 8);
-
-            for (int i = 0; i < listTag.size(); i++) {
-                String lore = listTag.getString(i);
-                if (lore.contains("Compacted Item")) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-}
diff --git a/common/src/main/java/sh/okx/civmodern/common/mixins/GuiGraphicsMixin.java b/common/src/main/java/sh/okx/civmodern/common/mixins/GuiGraphicsMixin.java
new file mode 100644
index 0000000000000000000000000000000000000000..de746105dda6e3235cfb05031ff78bbc3dc41cf3
--- /dev/null
+++ b/common/src/main/java/sh/okx/civmodern/common/mixins/GuiGraphicsMixin.java
@@ -0,0 +1,53 @@
+package sh.okx.civmodern.common.mixins;
+
+import com.llamalad7.mixinextras.sugar.Local;
+import com.llamalad7.mixinextras.sugar.ref.LocalRef;
+import net.minecraft.client.gui.GuiGraphics;
+import net.minecraft.world.item.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Unique;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Constant;
+import org.spongepowered.asm.mixin.injection.ModifyConstant;
+import org.spongepowered.asm.mixin.injection.ModifyVariable;
+import sh.okx.civmodern.common.AbstractCivModernMod;
+import sh.okx.civmodern.common.features.ExtendedItemStack;
+
+@Mixin(GuiGraphics.class)
+public abstract class GuiGraphicsMixin {
+    @Unique
+    private boolean cm$isCompactedItem = false;
+
+    @ModifyVariable(
+        method = "renderItemDecorations(Lnet/minecraft/client/gui/Font;Lnet/minecraft/world/item/ItemStack;IILjava/lang/String;)V",
+        at = @At(
+            value = "INVOKE",
+            target = "Lcom/mojang/blaze3d/vertex/PoseStack;pushPose()V",
+            shift = At.Shift.BEFORE
+        ),
+        argsOnly = true
+    )
+    public @NotNull ItemStack cm$alwaysShowItemAmountIfCompacted(
+        final @NotNull ItemStack stack,
+        final @Local(argsOnly = true) LocalRef<String> text
+    ) {
+        if (this.cm$isCompactedItem = ((ExtendedItemStack) (Object) stack).isMarkedAsCompacted()) {
+            text.set(Integer.toString(stack.getCount()));
+        }
+        return stack;
+    }
+
+    @ModifyConstant(
+        method = "renderItemDecorations(Lnet/minecraft/client/gui/Font;Lnet/minecraft/world/item/ItemStack;IILjava/lang/String;)V",
+        constant = @Constant(intValue = 16777215)
+    )
+    public int cm$colourItemDecorationIfCompacted(
+        final int decorationColour
+    ) {
+        if (this.cm$isCompactedItem) {
+            return AbstractCivModernMod.getInstance().getColourProvider().getCompactedColour();
+        }
+        return decorationColour;
+    }
+}
diff --git a/common/src/main/java/sh/okx/civmodern/common/mixins/ItemStackMixin.java b/common/src/main/java/sh/okx/civmodern/common/mixins/ItemStackMixin.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b02b7a62f280590223ba89a514e3284cd867808
--- /dev/null
+++ b/common/src/main/java/sh/okx/civmodern/common/mixins/ItemStackMixin.java
@@ -0,0 +1,60 @@
+package sh.okx.civmodern.common.mixins;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.Style;
+import net.minecraft.world.item.ItemStack;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Unique;
+import sh.okx.civmodern.common.features.ExtendedItemStack;
+
+@Mixin(ItemStack.class)
+public abstract class ItemStackMixin implements ExtendedItemStack {
+    @Unique
+    private Boolean cm$isCompacted = null;
+
+    @Unique
+    @Override
+    public boolean isMarkedAsCompacted() {
+        if (this.cm$isCompacted == null) {
+            this.cm$isCompacted = cm$isCompacted();
+        }
+        return this.cm$isCompacted;
+    }
+
+    @Unique
+    private boolean cm$isCompacted() {
+        final CompoundTag itemTag = ((ItemStack) (Object) this).getTag();
+        if (itemTag == null) {
+            return false;
+        }
+        if (!(itemTag.get(ItemStack.TAG_DISPLAY) instanceof final CompoundTag displayTag)) {
+            return false;
+        }
+        if (!(displayTag.get(ItemStack.TAG_LORE) instanceof final ListTag loreTag)) {
+            return false;
+        }
+        if (loreTag.getElementType() != Tag.TAG_STRING) {
+            return false;
+        }
+        for (final Tag element : loreTag) {
+            final Component line = Component.Serializer.fromJson(element.getAsString());
+            if (line == null) {
+                continue;
+            }
+            final var content = new StringBuilder();
+            for (final Component child : line.toFlatList()) {
+                if (!Style.EMPTY.equals(child.getStyle())) {
+                    return false;
+                }
+                content.append(child.getString());
+            }
+            if (ExtendedItemStack.COMPACTED_ITEM_LORE.contentEquals(content)) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/common/src/main/resources/civmodern.mixins.json b/common/src/main/resources/civmodern.mixins.json
index 050e517ede60a63ceaa9a0ba88e880f46cb15b21..9ac61b79a7d623284bfadeecdd75307721ef218f 100644
--- a/common/src/main/resources/civmodern.mixins.json
+++ b/common/src/main/resources/civmodern.mixins.json
@@ -5,9 +5,10 @@
     "compatibilityLevel": "JAVA_17",
     "mixins": [],
     "client": [
+        "GuiGraphicsMixin",
         "InventoryMixin",
-        "KeyMappingAccessor",
-        "DecorationsGuiGraphicsMixin"
+        "ItemStackMixin",
+        "KeyMappingAccessor"
     ],
     "server": [],
     "injectors": {
diff --git a/forge/build.gradle b/forge/build.gradle
index 339ee0b212f717d88594be6fd3ae473ac545522d..2bd7f40f745a7de20c562bed9da3de18d80c0a7a 100644
--- a/forge/build.gradle
+++ b/forge/build.gradle
@@ -26,6 +26,10 @@ dependencies {
 
     common(project(path: ":common", configuration: "namedElements")) { transitive = false }
     shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
+
+    // Forge doesn't seem to include this by default, unlike Fabric
+    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
+    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))
 }
 
 processResources {
